from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State

from bot_app import keyboards, text, api, functions, async_functions
from bot_app.app import bot, dp


class MedState(StatesGroup):
    start = State()
    distributor = State()
    csv = State()
    upload_csv = State()


# --- Start ---
@dp.message_handler(commands=['start'], state=['*'])
async def start_handler(message: types.Message, state: FSMContext):
    await MedState.start.set()
    async with state.proxy() as data:
        await bot.send_message(
            message.from_user.id,
            f"–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –ø–∞—Ä—Å–µ—Ä –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∏—Å—Ç—Ä–∏–±—å—é—Ç–µ—Ä–æ–≤! ü§ü",
            reply_markup=keyboards.distributor_keyboard(),
        )


@dp.message_handler(lambda message: message.text in functions.all_distributors_name(), state=[MedState.start])
async def distributor_handler(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['distributor'] = {"name": message.text.lower()}
        await MedState.distributor.set()
        await bot.send_message(
            message.from_user.id,
            f"–¢–µ–ø–µ—Ä—å —Å–∫–∞—á–∞–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏ –Ω–æ–≤—ã–π —Ñ–∞–π–ª csv –¥–∏—Å—Ç—Ä–∏–±—å—é—Ç–µ—Ä–∞ {data['distributor']['name']}.",
            reply_markup=keyboards.csv_keyboard(),
        )


@dp.message_handler(content_types=['text'], state=[MedState.distributor])
async def csv_handler(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        await async_functions.back_to_start(message, state)
        if message.text == text.download_csv:
            get_csv_filepath = api.get_csv(data['distributor']['name'])
            with open(get_csv_filepath, "rb") as f:
                file = f.read()
                await bot.send_document(
                    message.from_user.id,
                    (get_csv_filepath, file),
                )
            await bot.send_message(
                message.from_user.id,
                "–ù–∞–¥–µ—é—Å—å —Ç—ã —Å—á–∞—Å—Ç–ª–∏–≤ –∫–æ–∂–∞–Ω–Ω—ã–π.",
                reply_markup=keyboards.csv_keyboard(),
            )
        if message.text == text.upload_csv:
            await MedState.csv.set()
            await bot.send_message(
                message.from_user.id,
                f"–ó–∞–≥—Ä—É–∑–∏ —Ñ–∞–π–ª csv {data['distributor']['name']} –∏ —Å–º–æ—Ç—Ä–∏, —á—Ç–æ–±—ã –≤—Å–µ –ø–æ–ª—è –±—ã–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ, "
                f"—è –Ω–µ —Ö–æ—á—É —Ç–≤–æ–∏ –æ—à–∏–±–∫–∏ –∏—Å–∫–∞—Ç—å, –º–Ω–µ –∑–∞ —ç—Ç–æ –Ω–µ –ø–ª–∞—Ç—è—Ç.",
                reply_markup=keyboards.upload_keyboard(),
            )


@dp.message_handler(
    content_types=['document', 'text'],
    state=[MedState.csv],
)
async def upload_csv_handler(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        await async_functions.back_to_distributor(message, state)
        if message.document:
            # GET FILE
            file_id = message.document.file_id
            file_path = await bot.get_file(file_id)['file_path']
            print(file_path)
            # SEND API
            upload_csv_api = api.upload_csv(file_path, data['distributor']['name'], message.from_user.id)
            if upload_csv_api.status_code == 200:
                await bot.send_message(
                    message.from_user.id,
                    f"–û–≥–æ, –Ω—É —Ç—ã –º–µ–Ω—è –∏ –∑–∞–≥—Ä—É–∑–∏–ª! –ò–¥–∏–∫–∞, –ø–æ–ø–µ–π —á–∞–π–∫—É –∫–∞–∫ –∑–∞–∫–æ–Ω—á—É –Ω–∞–ø–∏—à—É.",
                    reply_markup=keyboards.csv_keyboard(),
                )
            elif upload_csv_api.status_code == 400:
                await bot.send_message(
                    message.from_user.id,
                    f"–¢—ã –≤—Ç–∏—Ä–∞–µ—à—å –º–Ω–µ –∫–∞–∫—É—é —Ç–æ –¥–∏—á—å... —á—Ç–æ —è —Ç–µ–±–µ –≥–æ–≤–æ—Ä–∏–ª –Ω–∞ —Å—á–µ—Ç –æ—à–∏–±–æ–∫? –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑",
                    reply_markup=keyboards.csv_keyboard(),
                )
            else:
                await bot.send_message(
                    message.from_user.id,
                    f"–ß—Ç–æ—Ç–æ –ø–æ—Ö–µ—Ä–∏–ª–æ—Å—å, –æ–ø—è—Ç—å —Ä–∞–∑—Ä–∞–± —Ä—É–∫–æ–∂–æ–ø, —Å–µ—Ä–≤–∞–∫ —É—Ä–æ–Ω–∏–ª",
                    reply_markup=keyboards.csv_keyboard(),
                )
